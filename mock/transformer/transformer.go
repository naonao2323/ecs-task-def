// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/transformer/transformer.go
//
// Generated by this command:
//
//	mockgen -source=pkg/transformer/transformer.go -destination=mock/transformer/transformer.go
//

// Package mock_transformer is a generated GoMock package.
package mock_transformer

import (
	ecs "github.com/naonao2323/ecs-task-def/pkg/plovider/ecs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransformer is a mock of Transformer interface.
type MockTransformer[P ecs.EcsTarget] struct {
	ctrl     *gomock.Controller
	recorder *MockTransformerMockRecorder[P]
}

// MockTransformerMockRecorder is the mock recorder for MockTransformer.
type MockTransformerMockRecorder[P ecs.EcsTarget] struct {
	mock *MockTransformer[P]
}

// NewMockTransformer creates a new mock instance.
func NewMockTransformer[P ecs.EcsTarget](ctrl *gomock.Controller) *MockTransformer[P] {
	mock := &MockTransformer[P]{ctrl: ctrl}
	mock.recorder = &MockTransformerMockRecorder[P]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransformer[P]) EXPECT() *MockTransformerMockRecorder[P] {
	return m.recorder
}

// Transform mocks base method.
func (m *MockTransformer[P]) Transform(tag, appName string, definition P) P {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", tag, appName, definition)
	ret0, _ := ret[0].(P)
	return ret0
}

// Transform indicates an expected call of Transform.
func (mr *MockTransformerMockRecorder[P]) Transform(tag, appName, definition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockTransformer[P])(nil).Transform), tag, appName, definition)
}
