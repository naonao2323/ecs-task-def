// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/decoder/decoder.go
//
// Generated by this command:
//
//	mockgen -source=pkg/decoder/decoder.go -destination=mock/decoder/decoder.go
//

// Package mock_decoder is a generated GoMock package.
package mock_decoder

import (
	decoder "ecs-task-def/pkg/decoder"
	ecs "ecs-task-def/pkg/plovider/ecs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDecoder is a mock of Decoder interface.
type MockDecoder[P ecs.EcsTarget] struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder[P]
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder[P ecs.EcsTarget] struct {
	mock *MockDecoder[P]
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder[P ecs.EcsTarget](ctrl *gomock.Controller) *MockDecoder[P] {
	mock := &MockDecoder[P]{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder[P]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder[P]) EXPECT() *MockDecoderMockRecorder[P] {
	return m.recorder
}

// Decode mocks base method.
func (m *MockDecoder[P]) Decode(definition P, format decoder.Format) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", definition, format)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockDecoderMockRecorder[P]) Decode(definition, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockDecoder[P])(nil).Decode), definition, format)
}
