// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/github/github.go
//
// Generated by this command:
//
//	mockgen -source=pkg/github/github.go -destination=mock/github/github.go
//

// Package mock_github is a generated GoMock package.
package mock_github

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGithub is a mock of Github interface.
type MockGithub struct {
	ctrl     *gomock.Controller
	recorder *MockGithubMockRecorder
}

// MockGithubMockRecorder is the mock recorder for MockGithub.
type MockGithubMockRecorder struct {
	mock *MockGithub
}

// NewMockGithub creates a new mock instance.
func NewMockGithub(ctrl *gomock.Controller) *MockGithub {
	mock := &MockGithub{ctrl: ctrl}
	mock.recorder = &MockGithubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithub) EXPECT() *MockGithubMockRecorder {
	return m.recorder
}

// CreatePullRequest mocks base method.
func (m *MockGithub) CreatePullRequest(ctx context.Context, headBranch, tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePullRequest", ctx, headBranch, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePullRequest indicates an expected call of CreatePullRequest.
func (mr *MockGithubMockRecorder) CreatePullRequest(ctx, headBranch, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePullRequest", reflect.TypeOf((*MockGithub)(nil).CreatePullRequest), ctx, headBranch, tag)
}
