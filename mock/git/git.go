// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/git/git.go
//
// Generated by this command:
//
//	mockgen -source=pkg/git/git.go -destination=mock/git/git.go
//

// Package mock_git is a generated GoMock package.
package mock_git

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGit is a mock of Git interface.
type MockGit struct {
	ctrl     *gomock.Controller
	recorder *MockGitMockRecorder
}

// MockGitMockRecorder is the mock recorder for MockGit.
type MockGitMockRecorder struct {
	mock *MockGit
}

// NewMockGit creates a new mock instance.
func NewMockGit(ctrl *gomock.Controller) *MockGit {
	mock := &MockGit{ctrl: ctrl}
	mock.recorder = &MockGitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGit) EXPECT() *MockGitMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGit) Add(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockGitMockRecorder) Add(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGit)(nil).Add), path)
}

// CheckOut mocks base method.
func (m *MockGit) CheckOut(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOut", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOut indicates an expected call of CheckOut.
func (mr *MockGitMockRecorder) CheckOut(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOut", reflect.TypeOf((*MockGit)(nil).CheckOut), target)
}

// Clone mocks base method.
func (m *MockGit) Clone(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockGitMockRecorder) Clone(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockGit)(nil).Clone), url)
}

// Commit mocks base method.
func (m *MockGit) Commit(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockGitMockRecorder) Commit(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockGit)(nil).Commit), message)
}

// Push mocks base method.
func (m *MockGit) Push(target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockGitMockRecorder) Push(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockGit)(nil).Push), target)
}

// Status mocks base method.
func (m *MockGit) Status() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(error)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockGitMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockGit)(nil).Status))
}
